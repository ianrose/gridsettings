@charset "UTF-8";

// =============================================================================
// Gridsettings
// =============================================================================
// A Sass toolkit that creates responsive grids.
//
// Release Versions: https://github.com/ianrose/gridsettings/releases
// Github: https://github.com/ianrose/gridsettings
// License: The MIT License (MIT)
//
// Inspired by and used stuff from:
// https://github.com/twbs/bootstrap-sass
// https://github.com/kristoferjoseph/flexboxgrid

// Grid Type
$float-grid: true !default;
$flexbox-grid: false !default;

// Breakpoints TODO - Provide ability to generate any number of breakpoints
$screen-xs-min: 480px !default;
$screen-sm-min: 768px !default;
$screen-md-min: 992px !default;
$screen-lg-min: 1230px !default;
$screen-xs-max: ($screen-sm-min -1) !default;
$screen-sm-max: ($screen-md-min - 1) !default;
$screen-md-max: ($screen-lg-min - 1) !default;

// Grid attributes
$grid-gutter: 12px !default;
$grid-columns: 12 !default;
$static-col-width: 300px !default;
$static-col-name: static !default;
$grid-col-name: col- !default;
$grid-xs-bp-name: xs- !default;
$grid-sm-bp-name: sm- !default;
$grid-md-bp-name: md- !default;
$grid-lg-bp-name: lg- !default;
$grid-push-name: push- !default;
$grid-pull-name: pull- !default;
$grid-offset-name: offset- !default;
$grid-container-name: container !default;
$grid-row-name: row !default;
$grid-container-gutter-name: #{$grid-container-name}-gutter !default;
$container-sm-width: 750px !default;
$container-sm-width: 750px !default;
$container-md-width: 970px !default;
$container-lg-width: 1200px !default;

// Clearfix mixin
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Optional Provides a for overall content. If bleed is desired don't wrap
// content in a "container-gutter"
@mixin make-container-gutter($gutter: $grid-gutter) {
  margin-left: $gutter / 2;
  margin-right: $gutter / 2;
}

// Centers the "container" on the page and clears floats.
@mixin make-container() {
  margin-right: auto;
  margin-left: auto;
  @if ($float-grid) {
    @include clearfix();
  }
}

// Creates a wrapper for a series of columns and with negative margin allows
// first and last column to be flush left and right of container. Clears
// "column" floats.
@mixin make-row($gutter: $grid-gutter) {
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  @if ($float-grid) {
    @include clearfix();
  } @else if ($flexbox-grid) {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  }
}

// Shared rules for all columns
[class*='#{$grid-col-name}'] {
  position: relative;
  padding-left: $grid-gutter / 2;
  padding-right: $grid-gutter / 2;
  @if ($float-grid) {
    min-height: 1px;
  } @else if ($flexbox-grid) {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-flex: 0;
    -webkit-flex-grow: 0;
    -ms-flex-positive: 0;
    flex-grow: 0;
    -webkit-flex-shrink: 0;
    -ms-flex-negative: 0;
    flex-shrink: 0;
  } @else {
      @warn "Grid type undefined";
  }
}

// Sets the width of a column based on the columns index and its type ie
// width, pull, offset, or push.
@mixin calc-grid-column($index, $bp, $type) {
  @if ($type == width) and ($index > 0) {
    .#{$grid-col-name}#{$bp}#{$index} {
      @if($float-grid){
        width: percentage(($index / $grid-columns));
      } @else if ($flexbox-grid) {
        -webkit-flex-basis: percentage(($index / $grid-columns));
        -ms-flex-preferred-size: percentage(($index / $grid-columns));
        flex-basis: percentage(($index / $grid-columns));
        max-width: percentage(($index / $grid-columns));
      } @else {
          @warn "Grid type undefined";
      }
    }
  }

  @if ($type == push) and ($index > 0) {
    .#{$grid-col-name}#{$bp}#{$grid-push-name}#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }

  @if ($type == push) and ($index == 0) {
    .#{$grid-col-name}#{$bp}#{$grid-push-name}0 {
      left: auto;
    }
  }

  @if ($type == pull) and ($index > 0) {
    .#{$grid-col-name}#{$bp}#{$grid-pull-name}#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }

  @if ($type == pull) and ($index == 0) {
    .#{$grid-col-name}#{$bp}#{$grid-pull-name}0 {
      right: auto;
    }
  }

  @if ($type == offset) {
    .#{$grid-col-name}#{$bp}#{$grid-offset-name}#{$index} {
      @if ($index > 0) {
        margin-left: percentage(($index / $grid-columns));
      } @else if ($index == 0) {
        margin-left: ($index / $grid-columns);
      }
    }
  }
}

// Float the column class based on breakpoint
@mixin float-grid-columns($bp) {
  @if ($float-grid) {
    $list: '';
    $i: 1;
    $list: ".#{$grid-col-name}#{$bp}#{$i}";
    @for $i from (1 + 1) through $grid-columns {
      $list: "#{$list}, .#{$grid-col-name}#{$bp}#{$i}";
    }
    #{$list} {
      float: left;
    }
  }
}

// Calculate column classes
@mixin loop-grid-columns($columns, $bp, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $bp, $type);
  }
}

// Make a grid based on breakpoint
@mixin make-grid($bp) {
  // Generate width column classes for a breakpoint
  @include loop-grid-columns($grid-columns, $bp, width);

  // Float columns for specified breakpoint and up
  @include float-grid-columns($bp);

  // Generate push column classes for a breakpoint
  @include loop-grid-columns($grid-columns, $bp, push);

  // Generate pull column classes for a breakpoint
  @include loop-grid-columns($grid-columns, $bp, pull);

  // Generate offset column classes for a breakpoint
  @include loop-grid-columns($grid-columns, $bp, offset);
}

@mixin make-static-fluid($bp) {
  .#{$grid-col-name}#{$bp}#{$static-col-name} {
    width: $static-col-width + $grid-gutter;
  }

  .fluid-#{$bp}wrapper {
    width: 100%;
  }

  .static-right .fluid-#{$bp}wrapper {
    float: left;
  }

  .static-left .fluid-#{$bp}wrapper {
    float: right;
  }

  .static-right {
    .#{$grid-col-name}#{$bp}fluid {
      margin-right: $static-col-width + $grid-gutter;
    }

    .#{$grid-col-name}#{$bp}#{$static-col-name} {
      float: left;
      margin-left: ($static-col-width + $grid-gutter) * -1;
    }
  }

  .static-left {
    .#{$grid-col-name}#{$bp}fluid {
      margin-left: $static-col-width + $grid-gutter;
    }

    .#{$grid-col-name}#{$bp}#{$static-col-name} {
      float: right;
      margin-right: ($static-col-width + $grid-gutter) * -1;
    }
  }
}

// TODO - later be part of optional generated CSS

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

@include make-grid($grid-xs-bp-name);
@include make-static-fluid($grid-xs-bp-name);

@media (min-width: $screen-sm-min) {
  @include make-grid($grid-sm-bp-name);
  @include make-static-fluid($grid-sm-bp-name);
}

@media (min-width: $screen-md-min) {
  @include make-grid($grid-md-bp-name);
  @include make-static-fluid($grid-md-bp-name);
}

@media (min-width: $screen-lg-min) {
  @include make-grid($grid-lg-bp-name);
  @include make-static-fluid($grid-lg-bp-name);
}

.#{$grid-container-gutter-name} {
  @include make-container-gutter();
}

.#{$grid-container-name}fluid {
  @include make-container();
}

.#{$grid-container-name} {
  @include make-container();

  @media (min-width: $screen-sm-min) {
    width: $container-sm-width;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md-width;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg-width;
  }
}

.#{$grid-row-name} {
  @include make-row();
}
